
Drag-n-Drop PROTOCOL
====================

Main principle is that the GAME (the server) has the definitive state
and the CLIENT is being an input/output device (told what to show).


Picking up an object :

(a) GAME: a pick-up-able item is under the cursor, user presses MB1
    Then: mark it as "dragging", clear EF_SELECTABLE, set EF_NODRAW.
    Send "ui_drag <where> <picname>" to client.

    <where> is 0 to cancel drag, 1 = pickup, 2 = drop / use

(b) CLIENT: parse "ui_drag" and then draw this picture underneath
    the cursor. 
 
(c) CLIENT: if picking up, and user move mouse over inventory (or off it)
    send a "invent_slot <id>" message to server, -1 for none.
    Hence game code always knows what mouse is pointing at.

(d) GAME: user released MB1, handle moving the object (to / from inventory).
    Send "ui_drag 0" to client to clear drag state there.
    Send "ui_invent" command(s) for inventory update.


Dropping an object (back into the world) :

(a) CLIENT: need to be able to highlight an item in the inventory.
    Send "invent_hl <id>" command to server (-1 for none)

(b) GAME: if mouse button is pressed, begin drag.
    Send "ui_drag <where> <pic>" to client.
    Send "ui_invent" to hide object in inventory.

(c) CLIENT: parse "ui_drag" and starts dragging.

(d) GAME: will check for valid drop points, send "ui_can_drop 0/1"
    [ maybe "2" when object can be used on something, e.g. a lock ]

(e) CLIENT: parse "ui_can_drop" and show it to user
    [ e.g. a down arrow when can drop to the world ]

(f) GAME: detect user release of MB1.
    Sends "ui_drag 0" (cancel drag) to client.
    Place object back in world, set EF_SELECTABLE (etc) and send commands
    to update inventory.

